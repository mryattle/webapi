"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query @middleware(checks: ["jwt.auth"]) {
    # users: [User!]! @all
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find

    # movies
    movies: [Movie!]! @paginate(defaultCount: 10)
    movies_ranked(orderBy: [OrderByClause!] @orderBy): [ViewMovieRank!]! @paginate(defaultCount: 10)
    movie(identifier: String @eq): Movie @find

    # movies rank
    movie_bests: [MovieBest!]! @paginate(defaultCount: 10)
}

type Mutation @middleware(checks: ["jwt.auth"]) {
    createMovie(identifier: String!, title: String!,
        year: Int!, duration: String!, director: String!): Movie! @create
    updateMovie(identifier: String!, title: String!,
        year: Int!, duration: String!, director: String!): Movie!
        @field(resolver: "App\\GraphQL\\Mutations\\UpdateMovie")
    rankMovie(movie: MovieInput!, rank: Int @rules(apply: ["integer", "required", "min:0", "max:10"])): Movie!
        @field(resolver: "App\\GraphQL\\Mutations\\RankMovie")        
}

input MovieInput {
    identifier: String!
}

input OrderByClause{
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASC
    DESC
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Movie {
    id: ID!
    identifier: String!
    title: String!
    year: Int!
    duration: String!
    director: String!
    rank: MovieBest @hasOne
    created_at: DateTime!
    updated_at: DateTime!
}

type ViewMovieRank {
    id: ID!
    identifier: String!
    title: String!
    year: Int!
    duration: String!
    director: String!
    rank: Float!
    created_at: DateTime!
    updated_at: DateTime!
}

type MovieBest {
    id: ID!
    rank: Float!
}

type MovieLike {
    id: ID!
    visitor: String!
    movie: Movie @hasOne
}